"""
Задание 4. Реализовать метакласс DocMeta, проверяющий наличие строк документации
в методах подчиненных ему классов.

Подсказка:
1) перегрузить метод __init__ метакласса
2) достучаться до атрибутов подчиненного класса вам поможет параметр clsdict
3) большая подсказка:
if not getattr(value, "__doc__"):
    raise TypeError(f"Метод должен иметь строку документации")

Создать подчиненный класс и проверить работу всего проекта
"""


class DocMeta(type):
    """Метакласс, проверяющий наличие строк документации в подконтрольном классе"""


    def __init__(self, clsname, bases, clsdict):
        # К моменту начала работы метода __init__ метакласса
        # словарь атрибутов контролируемого класса уже сформирован.
        for key, value in clsdict.items():
            
            # Пропустить специальные и частные методы
            if key.startswith("__"):
                continue

            # Пропустить любые невызываемые объекты
            if not hasattr(value, "__call__"):
                continue

            # Проверить наличие строки документирования
            if not getattr(value, "__doc__"):
                #print(value)
                raise TypeError(f"Метод {key} должен иметь строку документации")

        type.__init__(self, clsname, bases, clsdict) 


# Дочерний класс получает метакласс "в нагрузку" от родительского класса
class MyClass(metaclass=DocMeta):
    """Прикладной пользовательский класс"""

    def method_1(self):
        """!"""

    def method_2(self):
        """!"""




mc = MyClass()
#print(MyClass.__dict__)
