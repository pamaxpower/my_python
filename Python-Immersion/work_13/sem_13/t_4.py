"""
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ5
üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á–∏ 3 –∏ 4. –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ø—Ä–æ–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π
–∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã:
üìå –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (—Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –∑–∞–¥–∞–Ω–∏—è 4)
üìå –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É - —Ç—Ä–µ–±—É–µ—Ç —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–ª—è
–ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ
–º–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –≤—ã–∑—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
–¥–æ—Å—Ç—É–ø–∞. –ê –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –ø–æ–ª—É—á–∏—Ç–µ –µ–≥–æ —É—Ä–æ–≤–µ–Ω—å –∏–∑
–º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
üìå –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–º–µ–Ω—å—à–µ, —á–µ–º –≤–∞—à —É—Ä–æ–≤–µ–Ω—å, –≤—ã–∑—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
–¥–æ—Å—Ç—É–ø–∞.
"""

from json import dump, load
import os

class BaseError(Exception):
    pass


class LevelError(BaseError):
    def __init__(self, message="–û—à–∏–±–∫–∞ —É—Ä–æ–≤–Ω—è"):
        self.message = message
        # super().__init__(self.message)


class AccessError(BaseError):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –æ—à–∏–±–∫–æ–π –¥–æ—Å—Ç—É–ø–∞."""
    def __init__(self, message="–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞"):
        self.message = message
        # super().__init__(self.message)


def create_users_from_json(file_path):
    users = list()

    try:
        with open(file_path, "r", encoding="utf-8") as file:
            data = load(file)
            for identifier, user_data in data.items():
                users.append(User(name=user_data["–∏–º—è"], identifier=identifier, access_level=user_data["—É—Ä–æ–≤–µ–Ω—å_–¥–æ—Å—Ç—É–ø–∞"]))
    except FileNotFoundError:
        print(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except IOError as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

    return users


def save_to_json(name, identifier, access_level):

    file_path = "data.json"

    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as file:
            data = load(file)
    else:
        data = {}

    data[identifier] = {
        "–∏–º—è": name,
        "—É—Ä–æ–≤–µ–Ω—å_–¥–æ—Å—Ç—É–ø–∞": access_level
    }

    with open(file_path, "w", encoding="utf-8") as file:
        dump(data, file, ensure_ascii=False, indent=2)


class User:
    def __init__(self, name, identifier, access_level):
        self.name = name
        self.identifier = identifier
        self.access_level = access_level

    def __repr__(self):
        return f"User(name='{self.name}', identifier='{self.identifier}', access_level={self.access_level})"

    def __eq__(self, other):
        if isinstance(other, User):
            return self.identifier == other.identifier
        return False


class Project:
    def __init__(self):
        self.users = list()

    def load_data(self, file_path):
        self.users = create_users_from_json(file_path)

    def login(self, identifier):
        res = {user.identifier: user.access_level for user in self.users}
        try:
            if identifier in res:
                print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω')
                return res[identifier]
            raise AccessError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        except AccessError as error:
            return error

    def add_user(self, new_user, current_user_level):
        try:
            if new_user.access_level > current_user_level:
                raise LevelError("–í–∞—à —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        except LevelError as error:
            print(error)
        else:
            # self.users.append(new_user)
            save_to_json(new_user.name, new_user.identifier, new_user.access_level)


user_1 = User('–í–∏–∫—Ç–æ—Ä', '456', 5)
my_p = Project()
my_p.load_data('data.json')
print(my_p.users)
print(my_p.login('–í–∏–∫—Ç–æ—Ä', '777'))
my_p.add_user(user_1, 7)
print(my_p.login('456'))


# def get_login_level(name):

#         try:
#             for el in CheckUserLogin.users:
#                 if name == el.name:
#                     return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω'
#                 raise NameErr()
#         except NameErr as e:
#             print(e)
