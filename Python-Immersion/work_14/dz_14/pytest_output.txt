....F.......FF                                                           [100%]
================================== FAILURES ===================================
________________________________ test_addition ________________________________

    def test_addition():
        """Тестирование операции сложения двух прямоугольников"""
        rect1 = Rectangle(5, 1)
        rect2 = Rectangle(3, 4)
        result = rect1 + rect2
>       assert result.width == 6
E       assert 8 == 6
E        +  where 8 = <test_1.Rectangle object at 0x000001C77EDF7610>.width

test_1.py:165: AssertionError
______________________________ test_subtraction _______________________________

    def test_subtraction():
        """Тестирование операции вычитания двух прямоугольников"""
        r1 = Rectangle(10, 1)
        r2 = Rectangle(3, 4)
>       r3 = r1 - r2

test_1.py:221: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_1.py:137: in __sub__
    return Rectangle(width, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_1.Rectangle object at 0x000001C77EE42560>, width = 7, height = -3.0

    def __init__(self, width, height=None):
        if width <= 0:
            raise NegativeValueError(
                f'Ширина должна быть положительной, а не {width}')
        self._width = width
        if height is None:
            self._height = width
        else:
            if height <= 0:
>               raise NegativeValueError(
                    f'Высота должна быть положительной, а не {height}')
E               test_1.NegativeValueError: Высота должна быть положительной, а не -3.0

test_1.py:91: NegativeValueError
_______________________ test_subtraction_same_perimeter _______________________

    def test_subtraction_same_perimeter():
        """Тестирование операции вычитания с одинаковым периметром"""
        r1 = Rectangle(5, 1)
        r2 = Rectangle(4, 3)
>       r3 = r1 - r2

test_1.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_1.py:137: in __sub__
    return Rectangle(width, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_1.Rectangle object at 0x000001C77EDF43A0>, width = 1, height = 0.0

    def __init__(self, width, height=None):
        if width <= 0:
            raise NegativeValueError(
                f'Ширина должна быть положительной, а не {width}')
        self._width = width
        if height is None:
            self._height = width
        else:
            if height <= 0:
>               raise NegativeValueError(
                    f'Высота должна быть положительной, а не {height}')
E               test_1.NegativeValueError: Высота должна быть положительной, а не 0.0

test_1.py:91: NegativeValueError
============================== slowest durations ==============================

(42 durations < 0.005s hidden.  Use -vv to show these durations.)
=========================== short test summary info ===========================
FAILED test_1.py::test_addition - assert 8 == 6
FAILED test_1.py::test_subtraction - test_1.NegativeValueError: Высота должна...
FAILED test_1.py::test_subtraction_same_perimeter - test_1.NegativeValueError...
3 failed, 11 passed in 0.19s
